<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
   <!-- <properties>
        <property name="jdbc.driver" value="com.mysql.cj.jdbc.Driver"/>
        <property name="jdbc.url" value="jdbc:mysql://localhost:3306/mybatis"/>
        <property name="jdbc.username" value="root"/>
        <property name="jdbc.password" value="137152001szq"/>
    </properties>-->
    <properties resource="jdbc.properties"/>
<!--    default默认使用环境-->
<!--    当你使用mybatis创建SqlSessionFactory对象的时候，没有指定环境，默认使用哪个环境-->
    <environments default="development">
<!--        其中一个环境。连接的数据库是mybatis-->
<!--        一般一个数据库对应一个SqlSessionFactory对象-->
<!--        一个环境environment会对应一个SqlSessionFactory对象-->
        <environment id="development">
<!--            transactionManager标签
                1.作用：配置事务管理器，指定mybatis具体使用什么方式去管理事务
                2.type属性有两个值
                第一个：JDBC：使用原生的JDBC代码来管理事务
                conn.setAutoCommit(false)
                ...
                conn.commit
                第二个：MANAGED: mybatis不再负责事务的管理，将事务管理交给其他的JEE（JavaEE）容器来管理，比如：Spring
                3.不区分大小写
                4.在mybatis中提供了一个事务管理器接口：Transaction
                该接口用两个实现类
                JdbcTransaction
                MangedTransaction
                如果type=“JDBC” ，那么底层会实例化 JdbcTransaction对象
                如果type=“MANAGED” ，那么底层会实例化 MangedTransaction对象
-->    
            <transactionManager type="JDBC"/>
<!--             dataSource配置
                 1.dataSource被称为数据源
                 2.dataSource作用是什么？为程序提供Connection对象（但凡是给程序提供Connection对象的，都叫数据源）
                 3.数据源实际上是一套规范，JDK中有这套规范javax.sql.DataSource(这个数据源规范，这套接口实际上是JDk规范的)
                 4. 我们可以自己也可以编写数据源组件，只是实现javax.sql.DataSource接口就行，实现接口的所有方法，这样就有自己的数据源
                比如你可以写一个属于自己的数据库连接池（数据库连接池是提供连接对象的，所以数据库连接池就是一个数据源）
                5.常见的数据源组件有哪些（数据库连接池）
                阿里巴巴德鲁伊连接池：druid
                c3p0
                dbcp
                6.type属性用来指定数据源的类型：就是指定具体使用什么方式来获取Connection对象
                  type属性有三个值：必须是三选一
                  UNPOOLED：不使用数据库连接池技术，每一个请求过来之后，都是创建新的Connection对象
                  POOLED:使用mybatis自己实现的数据库连接池
                  JNDI ：集成其他三方的数据库连接池
                  JNDI是一套规范。谁实现了这套规范，大部分是web容器都实现了JNDI规范
                  例如:Tomcat,Jetty,webLogic,WebSphere这些服务器（容器）都实现了JNDI规范
                  JNDI：java命名目录接口。Tomcat服务器实现了这个规范
  -->
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.drive}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
<!--                提醒：正常使用连接池的话，池中有很多参数需要设置的，设置好参数，可以让连接池发挥的更好
            poolMaximumActiveConnections:连接池当中最多的正在使用的连接对象的数量上限。最多有多少个连接可以活动           -->
                <property name="poolMaximumActiveConnections" value="10"/>
<!--                每隔2秒打印日志，并尝试获取连接对象-->
                <property name="poolTimeToWait " value="2000"/>
<!--                强行让某个连接空闲，超时时间的设置-->
                <property name="poolMaximumCheckoutTime " value="10000"/>
<!--                最多空闲数量-->
                <property name="poolMaximumIdleConnections " value="5"/>
            </dataSource>
        </environment>

<!--        这是mybatis的另一个环境，也就是连接的数据库是另一个数据库的mybatis-->
        <environment id="mybatis">
            <transactionManager type="JDBC"></transactionManager>
            <dataSource type="POOLED">
                <property name="driver" value="com.mysql.cj.jdbc.Driver"/>
                <property name="url" value="jdbc:mysql://localhost:3306/bjpowernode"/>
                <property name="username" value="root"/>
                <property name="password" value="137152001szq"/>
            </dataSource>
        </environment>
    </environments>

<!--执行XxxMapper.xml路径-->
<!--resource属性自动会从类的根路径下开始查找资源-->
    <mappers>
        <mapper resource="CarMapper.xml"/>
    </mappers>
</configuration>